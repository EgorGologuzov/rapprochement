package com.nti.rapprochement.domain.contracts;

import android.graphics.Bitmap;

import java.util.function.Consumer;

/**
 * Интерфейс для связывания фронтенда и бэкенда.
 * Представляет объект для перевода последовательности Bitmap (захваченных с камеры) в Bitmap
 * с изображением схемы распознанных точек и текст.
 *
 * Сценарий использования интрфейса во фронтенд части:
 * 1. Дождаться вызова пользователем режима распознования жестов
 * 2. Запросить новый экземляр реализации интрефейса с помощью Domain.getGestureAnalyzer
 * 3. Установить колбеки отслеживающие изменение схемы рапознанных точек и текста с помощью
 * setPreviewChangeCallback и setTextChangeCallback.
 * 4. Начать захват изображения с камеры и передачу этих изображений в метод analyze
 * 5. Ожидать вызовов колбеков отслеживающие изменение схемы рапознанных точек и текста. Отображать
 * полученные результаты в пользовательском интерфейсе.
 * 6. Завершить распознавание жестов, вызвать метод dispose
 *
 * Пример реализации интерфейса: /implementations/FakeGestureAnalyzer.java
 */
public interface IGestureAnalyzer {
    /**
     * Метод установки колбека для отслеживания последней распознанной схемы точек. Схема точек -
     * это прозрачный Bitmap, такого же размера как переденные в метод analyze. Ожидается, что на
     * этом Bitmap нарисованы ключевые точки рук и соединяющие их линии.
     */
    void setPreviewChangeCallback(Consumer<Bitmap> callback);

    /**
     * Метод установки колбека для отслеживания распознанного текста. Ожидается, что анализатор
     * будет возвращать строку, содержащую весь распознанный текст целиком, начиная с момента
     * создания экземпляра анализатора. Фронтенд сам будет анализировать какая часть текста
     * изменилась.
     */
    void setTextChangeCallback(Consumer<String> callback);

    /**
     * Метод, в который будет передоваться последовательность кадров, захваченных с камеры. Фронтенд
     * будет ожидать завершения метода, прежде чем передавать в него следующий кадр. Если метод не
     * будет тормозить, то частота кадров будет примерно 25-30 в секунду.
     */
    void analyze(Bitmap bitmap, float rotation);

    /**
     * Метод утилизации анализотра. Будет вызываться, когда анализатор больше не нужен. В нем нужно
     * завершать работу всех сущностей, которые требуют явного завершения.
     */
    void dispose();
}
